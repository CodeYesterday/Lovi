@page "/log"

@using CodeYesterday.Lovi.Components.Layout
@using CodeYesterday.Lovi.Helper
@using CodeYesterday.Lovi.Models
@using Serilog.Events

@inherits LoviView
@layout PaneLayout

@if (Model.Session?.DataStorage is null)
{
    <RadzenText Text="No session loaded" />
}
else
{
    <RadzenStack Orientation="Orientation.Vertical" class="h-100" Gap="0">
        @* Logs data grid *@
        <RadzenDataGrid @ref="_dataGrid" Class="flex-fill w-100"
                        TItem="LogItemModel" Data="@Model.Session.PagedItems" Count="@Model.Session.FilteredLogEventCount" LoadData="@LoadData" AllowVirtualization="true"
                        AllowColumnReorder="true" AllowColumnResize="true"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterMode="FilterMode.SimpleWithMenu"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.And"
                        AllowSorting="true" AllowMultiColumnSorting="true"
                        AllowColumnPicking="true" Density="Density.Compact"
                        SelectionMode="DataGridSelectionMode.Single" @bind-Value="SelectedItems">

            <Columns>
                <RadzenDataGridColumn Title="Level" Property="@($"{nameof(LogItemModel.LogEvent)}.{nameof(LogEvent.Level)}")"
                                      Width="50px" MinWidth="50px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left"
                                      Sortable="true" Filterable="false">
                    <Template Context="item">
                        @{
                            var (icon, color) = GetLogEventIcon(item.LogEvent);
                            <RadzenIcon Icon="@icon" IconColor="@color" />
                        }
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Timestamp" Property="@($"{nameof(LogItemModel.LogEvent)}.{nameof(LogEvent.Timestamp)}")"
                                      FormatString="@SettingsService.GetSettings().TimestampFormatString"
                                      TextAlign="TextAlign.Right"
                                      Width="160px" MinWidth="40px" Frozen="true" FrozenPosition="FrozenColumnPosition.Left"
                                      Sortable="true" Filterable="true"
                                      SortOrder="SortOrder.Ascending" />

                @* Pull columns in LogLevelFilter forward *@
                @if (Model.Session is not null && !Model.Session.IsImporting)
                {
                    foreach (var property in Model.Session.LogLevelFilter.ActualLayerProperties
                    .Select(pn => Model.Session.DataStorage.Properties
                    .FirstOrDefault(p => string.Equals(p.Name, pn, StringComparison.Ordinal)))
                    .Where(pn => pn is not null))
                    {
                        @RenderPropertyColumn(property!)
                    }
                }

                <RadzenDataGridColumn Title="Message" Width="500px" MinWidth="40px"
                                      Property="@nameof(LogItemModel.RenderedMessage)"
                                      Sortable="true" Filterable="true" Type="@typeof(string)">
                    <Template Context="evt">
                        @LogEventHtmlRenderer.RenderedLogMessage(evt)
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Title="Message template" Width="100px" MinWidth="40px" Visible="false"
                                      Property="@($"{nameof(LogItemModel.LogEvent)}.{nameof(LogEvent.MessageTemplate)}")"
                                      Sortable="true" />

                <RadzenDataGridColumn Title="Exception" Width="100px" MinWidth="40px"
                                      Property="@($"{nameof(LogItemModel.ExceptionText)}")"
                                      Sortable="true" Filterable="true" />

                @* Property columns *@
                @if (Model.Session is not null && !Model.Session.IsImporting)
                {
                    foreach (var property in Model.Session.DataStorage.Properties
                    .Where(p => !Model.Session.LogLevelFilter.ActualLayerProperties.Contains(p.Name)))
                    {
                        @RenderPropertyColumn(property)
                    }
                }
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
}

@code
{
    public override Task OnCreatePanesAsync(IPaneLayout paneLayout, CancellationToken cancellationToken)
    {
        paneLayout.PaneUserSettings = UserSettings;

        paneLayout.LeftPane = new()
                {
                    Content = @<LogLevelFilterPane CssClass="w-100 h-100" />
            };
        paneLayout.RightPane = new()
                {
                    Content = @<LogEventDataPane CssClass="w-100 h-100" />
            };
        paneLayout.TopPane = new()
                {
                    Content = @<AdvancedFilterPane CssClass="w-100 h-100" />
            };
        paneLayout.BottomPane = new()
                {
                    Content = @<LogEventMessagePane CssClass="w-100 h-100" />
        };

        return Task.CompletedTask;
    }
}